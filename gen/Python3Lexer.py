# Generated from Python3.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,65,382,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,4,19,210,8,19,11,19,12,19,211,1,20,
        5,20,215,8,20,10,20,12,20,218,9,20,1,20,1,20,4,20,222,8,20,11,20,
        12,20,223,1,21,1,21,5,21,228,8,21,10,21,12,21,231,9,21,1,22,1,22,
        1,22,5,22,236,8,22,10,22,12,22,239,9,22,1,22,1,22,1,23,1,23,1,23,
        5,23,246,8,23,10,23,12,23,249,9,23,1,23,1,23,1,23,1,23,5,23,255,
        8,23,10,23,12,23,258,9,23,1,23,3,23,261,8,23,1,24,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,
        1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
        1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,55,1,55,
        1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,3,61,356,
        8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,3,62,365,8,62,1,63,4,63,
        368,8,63,11,63,12,63,369,1,63,1,63,1,64,1,64,5,64,376,8,64,10,64,
        12,64,379,9,64,1,64,1,64,1,237,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,123,62,125,63,127,64,129,65,1,0,8,1,0,48,57,1,0,46,46,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,
        34,34,92,92,4,0,10,10,13,13,39,39,92,92,3,0,9,9,12,12,32,32,2,0,
        10,10,13,13,396,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,138,1,0,0,0,5,143,1,
        0,0,0,7,146,1,0,0,0,9,149,1,0,0,0,11,152,1,0,0,0,13,155,1,0,0,0,
        15,158,1,0,0,0,17,161,1,0,0,0,19,164,1,0,0,0,21,167,1,0,0,0,23,170,
        1,0,0,0,25,174,1,0,0,0,27,178,1,0,0,0,29,182,1,0,0,0,31,186,1,0,
        0,0,33,191,1,0,0,0,35,195,1,0,0,0,37,202,1,0,0,0,39,209,1,0,0,0,
        41,216,1,0,0,0,43,225,1,0,0,0,45,232,1,0,0,0,47,260,1,0,0,0,49,262,
        1,0,0,0,51,265,1,0,0,0,53,267,1,0,0,0,55,269,1,0,0,0,57,271,1,0,
        0,0,59,273,1,0,0,0,61,275,1,0,0,0,63,278,1,0,0,0,65,280,1,0,0,0,
        67,282,1,0,0,0,69,285,1,0,0,0,71,288,1,0,0,0,73,291,1,0,0,0,75,294,
        1,0,0,0,77,297,1,0,0,0,79,301,1,0,0,0,81,304,1,0,0,0,83,308,1,0,
        0,0,85,311,1,0,0,0,87,313,1,0,0,0,89,315,1,0,0,0,91,317,1,0,0,0,
        93,320,1,0,0,0,95,323,1,0,0,0,97,326,1,0,0,0,99,328,1,0,0,0,101,
        330,1,0,0,0,103,332,1,0,0,0,105,334,1,0,0,0,107,336,1,0,0,0,109,
        340,1,0,0,0,111,342,1,0,0,0,113,344,1,0,0,0,115,346,1,0,0,0,117,
        348,1,0,0,0,119,350,1,0,0,0,121,352,1,0,0,0,123,355,1,0,0,0,125,
        364,1,0,0,0,127,367,1,0,0,0,129,373,1,0,0,0,131,132,5,105,0,0,132,
        133,5,109,0,0,133,134,5,112,0,0,134,135,5,111,0,0,135,136,5,114,
        0,0,136,137,5,116,0,0,137,2,1,0,0,0,138,139,5,102,0,0,139,140,5,
        114,0,0,140,141,5,111,0,0,141,142,5,109,0,0,142,4,1,0,0,0,143,144,
        5,43,0,0,144,145,5,61,0,0,145,6,1,0,0,0,146,147,5,45,0,0,147,148,
        5,61,0,0,148,8,1,0,0,0,149,150,5,42,0,0,150,151,5,61,0,0,151,10,
        1,0,0,0,152,153,5,64,0,0,153,154,5,61,0,0,154,12,1,0,0,0,155,156,
        5,47,0,0,156,157,5,61,0,0,157,14,1,0,0,0,158,159,5,37,0,0,159,160,
        5,61,0,0,160,16,1,0,0,0,161,162,5,38,0,0,162,163,5,61,0,0,163,18,
        1,0,0,0,164,165,5,124,0,0,165,166,5,61,0,0,166,20,1,0,0,0,167,168,
        5,94,0,0,168,169,5,61,0,0,169,22,1,0,0,0,170,171,5,60,0,0,171,172,
        5,60,0,0,172,173,5,61,0,0,173,24,1,0,0,0,174,175,5,62,0,0,175,176,
        5,62,0,0,176,177,5,61,0,0,177,26,1,0,0,0,178,179,5,42,0,0,179,180,
        5,42,0,0,180,181,5,61,0,0,181,28,1,0,0,0,182,183,5,47,0,0,183,184,
        5,47,0,0,184,185,5,61,0,0,185,30,1,0,0,0,186,187,5,112,0,0,187,188,
        5,97,0,0,188,189,5,115,0,0,189,190,5,115,0,0,190,32,1,0,0,0,191,
        192,5,100,0,0,192,193,5,101,0,0,193,194,5,108,0,0,194,34,1,0,0,0,
        195,196,5,114,0,0,196,197,5,101,0,0,197,198,5,116,0,0,198,199,5,
        117,0,0,199,200,5,114,0,0,200,201,5,110,0,0,201,36,1,0,0,0,202,203,
        5,121,0,0,203,204,5,105,0,0,204,205,5,101,0,0,205,206,5,108,0,0,
        206,207,5,100,0,0,207,38,1,0,0,0,208,210,7,0,0,0,209,208,1,0,0,0,
        210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,40,1,0,0,0,213,
        215,7,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,
        217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,221,7,1,0,0,220,
        222,7,0,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,
        224,1,0,0,0,224,42,1,0,0,0,225,229,7,2,0,0,226,228,7,3,0,0,227,226,
        1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,44,1,
        0,0,0,231,229,1,0,0,0,232,237,5,34,0,0,233,236,3,49,24,0,234,236,
        9,0,0,0,235,233,1,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,238,
        1,0,0,0,237,235,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,
        5,34,0,0,241,46,1,0,0,0,242,247,5,34,0,0,243,246,3,49,24,0,244,246,
        8,4,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,261,
        5,34,0,0,251,256,5,39,0,0,252,255,3,49,24,0,253,255,8,5,0,0,254,
        252,1,0,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,
        257,1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,261,5,39,0,0,260,
        242,1,0,0,0,260,251,1,0,0,0,261,48,1,0,0,0,262,263,5,92,0,0,263,
        264,9,0,0,0,264,50,1,0,0,0,265,266,5,43,0,0,266,52,1,0,0,0,267,268,
        5,45,0,0,268,54,1,0,0,0,269,270,5,42,0,0,270,56,1,0,0,0,271,272,
        5,47,0,0,272,58,1,0,0,0,273,274,5,37,0,0,274,60,1,0,0,0,275,276,
        5,47,0,0,276,277,5,47,0,0,277,62,1,0,0,0,278,279,5,60,0,0,279,64,
        1,0,0,0,280,281,5,62,0,0,281,66,1,0,0,0,282,283,5,61,0,0,283,284,
        5,61,0,0,284,68,1,0,0,0,285,286,5,33,0,0,286,287,5,61,0,0,287,70,
        1,0,0,0,288,289,5,62,0,0,289,290,5,61,0,0,290,72,1,0,0,0,291,292,
        5,60,0,0,292,293,5,61,0,0,293,74,1,0,0,0,294,295,5,105,0,0,295,296,
        5,110,0,0,296,76,1,0,0,0,297,298,5,110,0,0,298,299,5,111,0,0,299,
        300,5,116,0,0,300,78,1,0,0,0,301,302,5,105,0,0,302,303,5,115,0,0,
        303,80,1,0,0,0,304,305,5,97,0,0,305,306,5,110,0,0,306,307,5,100,
        0,0,307,82,1,0,0,0,308,309,5,111,0,0,309,310,5,114,0,0,310,84,1,
        0,0,0,311,312,5,38,0,0,312,86,1,0,0,0,313,314,5,124,0,0,314,88,1,
        0,0,0,315,316,5,94,0,0,316,90,1,0,0,0,317,318,5,60,0,0,318,319,5,
        60,0,0,319,92,1,0,0,0,320,321,5,62,0,0,321,322,5,62,0,0,322,94,1,
        0,0,0,323,324,5,42,0,0,324,325,5,42,0,0,325,96,1,0,0,0,326,327,5,
        61,0,0,327,98,1,0,0,0,328,329,5,58,0,0,329,100,1,0,0,0,330,331,5,
        44,0,0,331,102,1,0,0,0,332,333,5,59,0,0,333,104,1,0,0,0,334,335,
        5,46,0,0,335,106,1,0,0,0,336,337,5,46,0,0,337,338,5,46,0,0,338,339,
        5,46,0,0,339,108,1,0,0,0,340,341,5,64,0,0,341,110,1,0,0,0,342,343,
        5,40,0,0,343,112,1,0,0,0,344,345,5,41,0,0,345,114,1,0,0,0,346,347,
        5,91,0,0,347,116,1,0,0,0,348,349,5,93,0,0,349,118,1,0,0,0,350,351,
        5,123,0,0,351,120,1,0,0,0,352,353,5,125,0,0,353,122,1,0,0,0,354,
        356,5,13,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,
        358,5,10,0,0,358,124,1,0,0,0,359,360,5,32,0,0,360,361,5,32,0,0,361,
        362,5,32,0,0,362,365,5,32,0,0,363,365,5,9,0,0,364,359,1,0,0,0,364,
        363,1,0,0,0,365,126,1,0,0,0,366,368,7,6,0,0,367,366,1,0,0,0,368,
        369,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,
        372,6,63,0,0,372,128,1,0,0,0,373,377,5,35,0,0,374,376,8,7,0,0,375,
        374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,
        380,1,0,0,0,379,377,1,0,0,0,380,381,6,64,0,0,381,130,1,0,0,0,16,
        0,211,216,223,229,235,237,245,247,254,256,260,355,364,369,377,1,
        6,0,0
    ]

class Python3Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    INT = 20
    FLOAT = 21
    NAME = 22
    STRING = 23
    CHAR_STRING = 24
    ESC = 25
    PLUS = 26
    MINUS = 27
    STAR = 28
    SLASH = 29
    MODULO = 30
    DOUBLE_SLASH = 31
    LESS_THAN = 32
    GREATER_THAN = 33
    EQUALS = 34
    NOT_EQUALS = 35
    GREATER_THAN_OR_EQUAL = 36
    LESS_THAN_OR_EQUAL = 37
    IN = 38
    NOT = 39
    IS = 40
    AND = 41
    OR = 42
    BITWISE_AND = 43
    BITWISE_OR = 44
    BITWISE_XOR = 45
    LEFT_SHIFT = 46
    RIGHT_SHIFT = 47
    POWER = 48
    ASSIGN = 49
    COLON = 50
    COMMA = 51
    SEMICOLON = 52
    DOT = 53
    ELLIPSIS = 54
    AT = 55
    LEFT_PAREN = 56
    RIGHT_PAREN = 57
    LEFT_BRACKET = 58
    RIGHT_BRACKET = 59
    LEFT_BRACE = 60
    RIGHT_BRACE = 61
    NEWLINE = 62
    INDENT = 63
    WS = 64
    COMMENT = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "'from'", "'+='", "'-='", "'*='", "'@='", "'/='", 
            "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", 
            "'pass'", "'del'", "'return'", "'yield'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'//'", "'<'", "'>'", "'=='", "'!='", "'>='", 
            "'<='", "'in'", "'not'", "'is'", "'and'", "'or'", "'&'", "'|'", 
            "'^'", "'<<'", "'>>'", "'**'", "'='", "':'", "','", "';'", "'.'", 
            "'...'", "'@'", "'('", "')'", "'['", "']'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "NAME", "STRING", "CHAR_STRING", "ESC", "PLUS", 
            "MINUS", "STAR", "SLASH", "MODULO", "DOUBLE_SLASH", "LESS_THAN", 
            "GREATER_THAN", "EQUALS", "NOT_EQUALS", "GREATER_THAN_OR_EQUAL", 
            "LESS_THAN_OR_EQUAL", "IN", "NOT", "IS", "AND", "OR", "BITWISE_AND", 
            "BITWISE_OR", "BITWISE_XOR", "LEFT_SHIFT", "RIGHT_SHIFT", "POWER", 
            "ASSIGN", "COLON", "COMMA", "SEMICOLON", "DOT", "ELLIPSIS", 
            "AT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
            "LEFT_BRACE", "RIGHT_BRACE", "NEWLINE", "INDENT", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "INT", "FLOAT", 
                  "NAME", "STRING", "CHAR_STRING", "ESC", "PLUS", "MINUS", 
                  "STAR", "SLASH", "MODULO", "DOUBLE_SLASH", "LESS_THAN", 
                  "GREATER_THAN", "EQUALS", "NOT_EQUALS", "GREATER_THAN_OR_EQUAL", 
                  "LESS_THAN_OR_EQUAL", "IN", "NOT", "IS", "AND", "OR", 
                  "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LEFT_SHIFT", 
                  "RIGHT_SHIFT", "POWER", "ASSIGN", "COLON", "COMMA", "SEMICOLON", 
                  "DOT", "ELLIPSIS", "AT", "LEFT_PAREN", "RIGHT_PAREN", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
                  "NEWLINE", "INDENT", "WS", "COMMENT" ]

    grammarFileName = "Python3.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


